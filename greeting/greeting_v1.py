#!/usr/bin/env python
"""CLI for greeting, version v1."""
# NOTE: This file is autogenerated and should not be edited by hand.

import code
import os
import platform
import sys

from apitools.base.protorpclite import message_types
from apitools.base.protorpclite import messages

from google.apputils import appcommands
import gflags as flags

import apitools.base.py as apitools_base
from apitools.base.py import cli as apitools_base_cli
import greeting_v1_client as client_lib
import greeting_v1_messages as messages


def _DeclareGreetingFlags():
  """Declare global flags in an idempotent way."""
  if 'api_endpoint' in flags.FLAGS:
    return
  flags.DEFINE_string(
      'api_endpoint',
      u'https://dash-test-1.appspot.com/_ah/api/greeting/v1/',
      'URL of the API endpoint to use.',
      short_name='greeting_url')
  flags.DEFINE_string(
      'history_file',
      u'~/.greeting.v1.history',
      'File with interactive shell history.')
  flags.DEFINE_multistring(
      'add_header', [],
      'Additional http headers (as key=value strings). '
      'Can be specified multiple times.')
  flags.DEFINE_string(
      'service_account_json_keyfile', '',
      'Filename for a JSON service account key downloaded'
      ' from the Developer Console.')
  flags.DEFINE_enum(
      'alt',
      u'json',
      [u'json'],
      u'Data format for the response.')
  flags.DEFINE_string(
      'fields',
      None,
      u'Selector specifying which fields to include in a partial response.')
  flags.DEFINE_string(
      'key',
      None,
      u'API key. Your API key identifies your project and provides you with '
      u'API access, quota, and reports. Required unless you provide an OAuth '
      u'2.0 token.')
  flags.DEFINE_string(
      'oauth_token',
      None,
      u'OAuth 2.0 token for the current user.')
  flags.DEFINE_boolean(
      'prettyPrint',
      'True',
      u'Returns response with indentations and line breaks.')
  flags.DEFINE_string(
      'quotaUser',
      None,
      u'Available to use for quota purposes for server-side applications. Can'
      u' be any arbitrary string assigned to a user, but should not exceed 40'
      u' characters. Overrides userIp if both are provided.')
  flags.DEFINE_string(
      'trace',
      None,
      'A tracing token of the form "token:<tokenid>" to include in api '
      'requests.')
  flags.DEFINE_string(
      'userIp',
      None,
      u'IP address of the site where the request originates. Use this if you '
      u'want to enforce per-user limits.')


FLAGS = flags.FLAGS
apitools_base_cli.DeclareBaseFlags()
_DeclareGreetingFlags()


def GetGlobalParamsFromFlags():
  """Return a StandardQueryParameters based on flags."""
  result = messages.StandardQueryParameters()
  if FLAGS['alt'].present:
    result.alt = messages.StandardQueryParameters.AltValueValuesEnum(FLAGS.alt)
  if FLAGS['fields'].present:
    result.fields = FLAGS.fields.decode('utf8')
  if FLAGS['key'].present:
    result.key = FLAGS.key.decode('utf8')
  if FLAGS['oauth_token'].present:
    result.oauth_token = FLAGS.oauth_token.decode('utf8')
  if FLAGS['prettyPrint'].present:
    result.prettyPrint = FLAGS.prettyPrint
  if FLAGS['quotaUser'].present:
    result.quotaUser = FLAGS.quotaUser.decode('utf8')
  if FLAGS['trace'].present:
    result.trace = FLAGS.trace.decode('utf8')
  if FLAGS['userIp'].present:
    result.userIp = FLAGS.userIp.decode('utf8')
  return result


def GetClientFromFlags():
  """Return a client object, configured from flags."""
  log_request = FLAGS.log_request or FLAGS.log_request_response
  log_response = FLAGS.log_response or FLAGS.log_request_response
  api_endpoint = apitools_base.NormalizeApiEndpoint(FLAGS.api_endpoint)
  additional_http_headers = dict(x.split('=', 1) for x in FLAGS.add_header)
  credentials_args = {
      'service_account_json_keyfile': os.path.expanduser(FLAGS.service_account_json_keyfile)
  }
  try:
    client = client_lib.GreetingV1(
        api_endpoint, log_request=log_request,
        log_response=log_response,
        credentials_args=credentials_args,
        additional_http_headers=additional_http_headers)
  except apitools_base.CredentialsError as e:
    print 'Error creating credentials: %s' % e
    sys.exit(1)
  return client


class PyShell(appcommands.Cmd):

  def Run(self, _):
    """Run an interactive python shell with the client."""
    client = GetClientFromFlags()
    params = GetGlobalParamsFromFlags()
    for field in params.all_fields():
      value = params.get_assigned_value(field.name)
      if value != field.default:
        client.AddGlobalParam(field.name, value)
    banner = """
           == greeting interactive console ==
                 client: a greeting client
          apitools_base: base apitools module
         messages: the generated messages module
    """
    local_vars = {
        'apitools_base': apitools_base,
        'client': client,
        'client_lib': client_lib,
        'messages': messages,
    }
    if platform.system() == 'Linux':
      console = apitools_base_cli.ConsoleWithReadline(
          local_vars, histfile=FLAGS.history_file)
    else:
      console = code.InteractiveConsole(local_vars)
    try:
      console.interact(banner)
    except SystemExit as e:
      return e.code


class Authcheck(apitools_base_cli.NewCmd):
  """Command wrapping api.Authcheck."""

  usage = """authcheck"""

  def __init__(self, name, fv):
    super(Authcheck, self).__init__(name, fv)

  def RunWithArgs(self):
    """Call the greeting.authcheck method.
    """
    client = GetClientFromFlags()
    global_params = GetGlobalParamsFromFlags()
    request = messages.GreetingAuthcheckRequest(
        )
    result = client.api.Authcheck(
        request, global_params=global_params)
    print apitools_base_cli.FormatOutput(result)


class Create(apitools_base_cli.NewCmd):
  """Command wrapping api.Create."""

  usage = """create"""

  def __init__(self, name, fv):
    super(Create, self).__init__(name, fv)
    flags.DEFINE_string(
        'id',
        None,
        'A string attribute.',
        flag_values=fv)
    flags.DEFINE_string(
        'message',
        None,
        'A string attribute.',
        flag_values=fv)

  def RunWithArgs(self):
    """Call the greeting.create method.

    Flags:
      id: A string attribute.
      message: A string attribute.
    """
    client = GetClientFromFlags()
    global_params = GetGlobalParamsFromFlags()
    request = messages.GreetingEP(
        )
    if FLAGS['id'].present:
      request.id = FLAGS.id.decode('utf8')
    if FLAGS['message'].present:
      request.message = FLAGS.message.decode('utf8')
    result = client.api.Create(
        request, global_params=global_params)
    print apitools_base_cli.FormatOutput(result)


class Delete(apitools_base_cli.NewCmd):
  """Command wrapping api.Delete."""

  usage = """delete <id>"""

  def __init__(self, name, fv):
    super(Delete, self).__init__(name, fv)
    flags.DEFINE_string(
        'message',
        None,
        'A string attribute.',
        flag_values=fv)

  def RunWithArgs(self, id):
    """Call the greeting.delete method.

    Args:
      id: A string attribute.

    Flags:
      message: A string attribute.
    """
    client = GetClientFromFlags()
    global_params = GetGlobalParamsFromFlags()
    request = messages.GreetingEP(
        id=id.decode('utf8'),
        )
    if FLAGS['message'].present:
      request.message = FLAGS.message.decode('utf8')
    result = client.api.Delete(
        request, global_params=global_params)
    print apitools_base_cli.FormatOutput(result)


class Get(apitools_base_cli.NewCmd):
  """Command wrapping api.Get."""

  usage = """get <id>"""

  def __init__(self, name, fv):
    super(Get, self).__init__(name, fv)

  def RunWithArgs(self, id):
    """Call the greeting.get method.

    Args:
      id: A string attribute.
    """
    client = GetClientFromFlags()
    global_params = GetGlobalParamsFromFlags()
    request = messages.GreetingGetRequest(
        id=id.decode('utf8'),
        )
    result = client.api.Get(
        request, global_params=global_params)
    print apitools_base_cli.FormatOutput(result)


class List(apitools_base_cli.NewCmd):
  """Command wrapping api.List."""

  usage = """list"""

  def __init__(self, name, fv):
    super(List, self).__init__(name, fv)
    flags.DEFINE_string(
        'limit',
        None,
        'A string attribute.',
        flag_values=fv)
    flags.DEFINE_string(
        'order',
        None,
        'A string attribute.',
        flag_values=fv)
    flags.DEFINE_string(
        'pageToken',
        None,
        'A string attribute.',
        flag_values=fv)

  def RunWithArgs(self):
    """Call the greeting.list method.

    Flags:
      limit: A string attribute.
      order: A string attribute.
      pageToken: A string attribute.
    """
    client = GetClientFromFlags()
    global_params = GetGlobalParamsFromFlags()
    request = messages.GreetingListRequest(
        )
    if FLAGS['limit'].present:
      request.limit = int(FLAGS.limit)
    if FLAGS['order'].present:
      request.order = FLAGS.order.decode('utf8')
    if FLAGS['pageToken'].present:
      request.pageToken = FLAGS.pageToken.decode('utf8')
    result = client.api.List(
        request, global_params=global_params)
    print apitools_base_cli.FormatOutput(result)


class Setup2(apitools_base_cli.NewCmd):
  """Command wrapping api.Setup2."""

  usage = """setup2"""

  def __init__(self, name, fv):
    super(Setup2, self).__init__(name, fv)

  def RunWithArgs(self):
    """Call the greeting.setup2 method.
    """
    client = GetClientFromFlags()
    global_params = GetGlobalParamsFromFlags()
    request = messages.GreetingSetup2Request(
        )
    result = client.api.Setup2(
        request, global_params=global_params)
    print apitools_base_cli.FormatOutput(result)


def main(_):
  appcommands.AddCmd('pyshell', PyShell)
  appcommands.AddCmd('authcheck', Authcheck)
  appcommands.AddCmd('create', Create)
  appcommands.AddCmd('delete', Delete)
  appcommands.AddCmd('get', Get)
  appcommands.AddCmd('list', List)
  appcommands.AddCmd('setup2', Setup2)

  apitools_base_cli.SetupLogger()
  if hasattr(appcommands, 'SetDefaultCommand'):
    appcommands.SetDefaultCommand('pyshell')


run_main = apitools_base_cli.run_main

if __name__ == '__main__':
  appcommands.Run()
